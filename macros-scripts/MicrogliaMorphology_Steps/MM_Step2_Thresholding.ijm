//// Microglia Morphology ImageJ macro
//// STEP 2: Threshold images
//// Created by Jenn Kim on September 18, 2022
//// Updated by Rohin Manohar on October 27, 2025

// FUNCTIONS

// Auto thresholding 
function thresholding(input, output, filename) {
		print(input + filename);
		open(input + filename);
	
		// MEASURE AREA
		run("Set Measurements...", "area display redirect=None decimal=9");
		run("Measure");
		
		// THRESHOLD IMAGE AND CLEAN UP FOR DOWNSTREAM PROCESSING IN ANALYZESKELETON
		run("8-bit");
		// convert to grayscale to best visualize all positive staining
		run("Grays");
		// adjust the brighness and contrast to make sure you can visualize all microglia processes
		// in ImageJ, B&C are changed by updating the image's lookup table, so pixel values are unchanged
		run("Brightness/Contrast...");
		run("Enhance Contrast", "saturated=0.35");
		// run Unsharp Mask filter to further increase contrast of image using default settings
		// this mask does not create details, but rather clarifies existing detail in image
		run("Unsharp Mask...", "radius=3 mask=0.60");
		// use despeckle function to remove salt&pepper noise generated by unsharp mask filter
		run("Despeckle");
		run("Auto Threshold", "method=&auto_method ignore_black white");
		if (roichoice){
			// exclude anything not within roi
			setBackgroundColor(0, 0, 0); 
			run("Clear Outside"); 
		}
		// use despeckle function to remove remaining single-pixel noise generated by thresholding
		run("Despeckle");
		// apply close function to connect any disconnected cell processes back to the rest of the cell
		// this function connects two dark pixels if they are separated by up to 2 pixels
		run("Close-");
		// after closing up cells, remove any outliers
		// replaces a bright or dark outlier pixel by the median pixels in the surrounding area if it deviates by more than the threshold value specified
		// here, bright outliers are targeted with pixel radius 2 and threshold of 50
		run("Remove Outliers...", "radius=2 threshold=50 which=Bright");
		// save thresholded + cleaned image -- this is the input for skeleton analysis below
		saveAs("Tiff", output + filename + "_thresholded");
		
		close();
		
	}
	
// Auto local thresholding 
function thresholding2(input, output, filename) {
		print(input + filename);
		open(input + filename);
		
		// MEASURE AREA
		run("Set Measurements...", "area display redirect=None decimal=9");
		run("Measure");
	
		// THRESHOLD IMAGE AND CLEAN UP FOR DOWNSTREAM PROCESSING IN ANALYZESKELETON
		run("8-bit");
		// convert to grayscale to best visualize all positive staining
		run("Grays");
		// adjust the brighness and contrast to make sure you can visualize all microglia processes
		// in ImageJ, B&C are changed by updating the image's lookup table, so pixel values are unchanged
		run("Brightness/Contrast...");
		run("Enhance Contrast", "saturated=0.35");
		// run Unsharp Mask filter to further increase contrast of image using default settings
		// this mask does not create details, but rather clarifies existing detail in image
		run("Unsharp Mask...", "radius=3 mask=0.60");
		// use despeckle function to remove salt&pepper noise generated by unsharp mask filter
		run("Despeckle");		
		run("Auto Local Threshold", "method=&autolocal_method radius=&autolocal_radius parameter_1=0 parameter_2=0 white");
		if (roichoice){
			// exclude anything not within roi
			setBackgroundColor(0, 0, 0); 
			run("Clear Outside"); 
		}
		// use despeckle function to remove remaining single-pixel noise generated by thresholding
		run("Despeckle");
		// apply close function to connect any disconnected cell processes back to the rest of the cell
		// this function connects two dark pixels if they are separated by up to 2 pixels
		run("Close-");
		// after closing up cells, remove any outliers
		// replaces a bright or dark outlier pixel by the median pixels in the surrounding area if it deviates by more than the threshold value specified
		// here, bright outliers are targeted with pixel radius 2 and threshold of 50
		run("Remove Outliers...", "radius=2 threshold=50 which=Bright");
		// save thresholded + cleaned image -- this is the input for skeleton analysis below
		saveAs("Tiff", output + filename + "_thresholded");
		
		close();
		
	}

// choices in drop-down prompts for MicrogliaMorphology macro
thresholding_approach = newArray("Auto thresholding", "Auto local thresholding");
thresholding_parameters = newArray("Huang","Huang2","Intermodes","IsoData","Li","MaxEntropy","Mean","MinError(I)","Minimum","Moments","Otsu","Percentile","RenyiEntropy","Shanbhag","Triangle","Yen")
thresholding_parameters2 = newArray("Bernsen","Contrast","Mean","Median","MidGrey","Niblack","Otsu","Phansalkar","Sauvola");



// MACRO STARTS HERE

//Welcome message
		Dialog.create("MicrogliaMorphology");
		Dialog.addMessage("Welcome to Microglia Morphology!");
		Dialog.addMessage("Now that you have determined your dataset-specific parameters, we will proceed with thresholding your images.");
		Dialog.addChoice("Are you using auto thresholding or auto local thresholding?", thresholding_approach);
		Dialog.addMessage("If you are using auto thresholding:");
		Dialog.addChoice("Which method is best for your dataset?", thresholding_parameters);
		Dialog.addMessage("If you are using auto local thresholding:");
		Dialog.addChoice("Which method is best for your dataset?", thresholding_parameters2);
		Dialog.addNumber("Radius:", 100);
		Dialog.show();

		auto_or_autolocal = Dialog.getChoice();
		auto_method = Dialog.getChoice();
		autolocal_method= Dialog.getChoice();
		autolocal_radius = Dialog.getNumber();
		
// STEP 2. Thresholding

//use file browser to choose path and files to run plugin on
		setOption("JFileChooser",true);
		subregion_dir=getDirectory("Choose parent folder containing original input images");
		subregion_input=getFileList(subregion_dir);
		autocount=subregion_input.length;
			
		//use file browser to choose path and files to save output to
		setOption("JFileChooser",true);
		output=getDirectory("Choose output folder to write thresholded images to");
		
		//area measurements saved to parent folder
		output2=File.getParent(output);

		//dialog box
		Dialog.create("MicrogliaMorphology");
		Dialog.addMessage("Processing files from directory:");
		parentname=split(subregion_dir,"/");
		Dialog.addMessage(parentname[(parentname.length)-1]);
		Dialog.addMessage("which has this many images:");
		Dialog.addMessage(autocount);
		Dialog.addMessage("Select range of images you'd like to analyze");
		Dialog.addNumber("Start at Image:", 1);
		Dialog.addNumber("Stop at Image:", 1);
		Dialog.addCheckbox("Do your input images have ROIs traced?", true);
		Dialog.show();
				
		startAt=Dialog.getNumber();
		endAt=Dialog.getNumber();
		roichoice=Dialog.getCheckbox();
		
		if(auto_or_autolocal == "Auto thresholding"){
			setBatchMode("show");
			for (i=(startAt-1); i<(endAt); i++){
				thresholding(subregion_dir, output, subregion_input[i]);
				}
		}
		
		if(auto_or_autolocal == "Auto local thresholding"){
			setBatchMode("show");
			for (i=(startAt-1); i<(endAt); i++){
				thresholding2(subregion_dir, output, subregion_input[i]);
				}
		}
		
		// SAVE AREA MEASURES
		saveAs("Results", output2 + "/Areas.csv");
		selectWindow("Results");
	   	run("Close");
		
		print("Thresholding finished");
		if (isOpen("Results")) {
		    selectWindow("Results");
		    run("Close");

// Progress message
		Dialog.create("MicrogliaMorphology");
		Dialog.addMessage("We are done thresholding");
		Dialog.show();
